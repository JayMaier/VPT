
step 0
recon loss: 0.814
validation recon loss 0.792
validation EMA recon loss 0.792
sample saved to results/sampled.0.gif
step 1
Traceback (most recent call last):
  File "/home/jay/VPT/src/train_magvit.py", line 56, in <module>
    trainer.train()
  File "/home/jay/anaconda3/envs/magvit/lib/python3.12/site-packages/magvit2_pytorch/trainer.py", line 516, in train
    self.train_step(dl_iter)
  File "/home/jay/anaconda3/envs/magvit/lib/python3.12/site-packages/magvit2_pytorch/trainer.py", line 356, in train_step
    self.accelerator.backward(loss / self.grad_accum_every)
  File "/home/jay/anaconda3/envs/magvit/lib/python3.12/site-packages/accelerate/accelerator.py", line 2001, in backward
    loss.backward(**kwargs)
  File "/home/jay/anaconda3/envs/magvit/lib/python3.12/site-packages/torch/_tensor.py", line 522, in backward
    torch.autograd.backward(
  File "/home/jay/anaconda3/envs/magvit/lib/python3.12/site-packages/torch/autograd/__init__.py", line 266, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 392.00 MiB. GPU 0 has a total capacity of 14.89 GiB of which 111.25 MiB is free. Process 1662538 has 6.53 GiB memory in use. Process 1680206 has 2.34 GiB memory in use. Including non-PyTorch memory, this process has 5.58 GiB memory in use. Of the allocated memory 5.30 GiB is allocated by PyTorch, and 124.40 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)